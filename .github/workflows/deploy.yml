name: Deploy to Amazon ECS

on:
  push:
    branches:
      - test-actions-workflow

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 3: Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build Docker images

      - name: Make script executable
        run: chmod +x ./deploy.sh

      - name: Build Docker images
        run: ./deploy.sh
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_ID: ${{ secrets.GOOGLE_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          MONGO_URL: ${{ secrets.MONGO_URL }}

      # Step 6: Tag and push images to Amazon ECR
      - name: Tag and push images
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: $(date +%Y%m%d%H%M%S)
        run: |
          # Tag your images (adjust names if needed)
          docker tag frontend:latest $ECR_REPOSITORY:frontend-$IMAGE_TAG
          docker tag backend:latest $ECR_REPOSITORY:backend-$IMAGE_TAG

          # Push images to ECR
          docker push $ECR_REPOSITORY:frontend-$IMAGE_TAG
          docker push $ECR_REPOSITORY:backend-$IMAGE_TAG

      # Step 7: Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster your-ecs-cluster-name --service your-ecs-service-name --force-new-deployment
